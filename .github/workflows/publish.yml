name: Publish package

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      # Install pnpm
      - name: Setup pnpm
        run: npm install -g pnpm

      # Install dependencies
      - name: Install dependencies
        run: pnpm install

      # Check if the version has changed
      - name: Check the version
        id: check
        run: |
          CURRENT_VERSION=$(jq -r .version package.json)
          echo "Current version: $CURRENT_VERSION"
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          LATEST_VERSION=${LATEST_TAG#v}

          if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; 
          then
            echo "Version changed"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version not changed"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      # Build the package
      - name: Build
        if: steps.check.outputs.version_changed == 'true'
        run: pnpm build

      # Publish the package to npm
      - name: Publish
        if: steps.check.outputs.version_changed == 'true'
        run: npm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Tag the release
      - name: Tag the release
        if: steps.check.outputs.version_changed == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag v${{ steps.check.outputs.new_version }}
          git push origin v${{ steps.check.outputs.new_version }}

      # Create a GitHub release
      - name: Create GitHub Release
        if: steps.check.outputs.version_changed == 'true'
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.check.outputs.new_version }}
          release_name: "Release v${{ steps.check.outputs.new_version }}"
          body: "Automatically generated release by GitHub Actions."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}